objref volt_list // record 
objref volt_tvec // record time
objref volt_vec  // record voltage
objref volt_rlist  // record rn membrance potential
objref volt_rvec  // record rn voltage

proc setVoltageRecord() {local i,j, SynapsePrintOn, id, rngid, minid, maxid, glomid
    volt_tvec = new Vector()
    volt_tvec.record(&t)
    printf("setVoltageRecord() (pc.id:%d)\n",pc.id)
    printf("SIZE OF VECTOR : %d\n",volt_tvec.buffer_size())
    volt_list = new List()
    volt_rlist = new List()    
    
    SynapsePrintOn = 0

    for (j = 0; j<cells.count(); j+=1) {
        cellgid = j * pc.nhost + pc.id    
        if (cellgid < 163 + 183) { // pn
            volt_vec = new Vector()
	    volt_vec.record(&cells.object[j].Dend[10].v(0.5))
	    //volt_vec.record(&cells.object[j].Dend[3].v(0.5))
	    volt_list.append(volt_vec)
        } else if (cellgid == 163 + 183 + 1) { // ln1
            volt_vec = new Vector()
	    volt_vec.record(&cells.object[j].Dend[316].v(0.5))
	    volt_list.append(volt_vec)
        } else { // ln
            volt_vec = new Vector()
	    volt_vec.record(&cells.object[j].Dend[3].v(0.5))
	    volt_list.append(volt_vec)
        }
    }

    for (j = 0; j<rncells.count(); j+=1) {
        rngid = j * pc.nhost + pc.id
        glomid = GLOMID
        minid = 20 * glomid
        maxid = 20 * (glomid + 2)	
	// if (rngid >= minid && rngid < maxid) {
            volt_rvec = new Vector()
	    volt_rvec.record(&rncells.object[j].Dend[3].v(0.5))
	    volt_rlist.append(volt_rvec)
	// }
    }
}

proc setOneVoltageRecord() {local i,j, SynapsePrintOn, id, rngid, minid, maxid, glomid
    volt_tvec = new Vector()
    volt_tvec.record(&t)
    printf("setVoltageRecord() (pc.id:%d)\n",pc.id)
    printf("SIZE OF VECTOR : %d\n",volt_tvec.buffer_size())
    volt_list = new List()
    volt_rlist = new List()    
    
    SynapsePrintOn = 0

    for (j = 0; j<cells.count(); j+=1) {
        cellgid = j * pc.nhost + pc.id    
        volt_vec = new Vector()
	volt_vec.record(&cells.object[j].Dend[316].v(0.5))
        //volt_vec.record(&cells.object[j].Dend[316].cai(0.5))
	volt_list.append(volt_vec)
    }

    for (j = 0; j<rncells.count(); j+=1) {
        rngid = j * pc.nhost + pc.id
        glomid = GLOMID
        // minid = 20 * glomid
        // maxid = 20 * (glomid + 2)	
	// if (rngid >= minid && rngid < maxid) {
            volt_rvec = new Vector()
	    volt_rvec.record(&rncells.object[j].Dend[3].v(0.5))
	    volt_rlist.append(volt_rvec)
	// }
    }
}

proc fprintVoltageRecord() {local j localobj mt, file
    strdef filename
    print "cells.count = ", cells.count()
    print "rncells.count = ", rncells.count()     
    for(j = 0; j<cells.count();j+=1){
        mt = new Matrix()
        file = new File()
        mt.resize(volt_tvec.size(),2)
        mt.setcol(0,volt_tvec)
        mt.setcol(1,volt_list.o(j))
        sprint(filename, "%s%s.txt", VOLTAGEOUT_DIR, cellnames.object[j].s)
        file.wopen(filename)
        mt.fprint(file,"%5.5f\t")
        file.close()
    }
    
    for(j = 0; j<rncells.count();j+=1){
        rngid = j * pc.nhost + pc.id
	// print rngid
        glomid = GLOMID
        minid = 20 * glomid
        maxid = 20 * (glomid + 2)

	if (rngid >= minid && rngid < maxid) {
        mt = new Matrix()
        file = new File()
        mt.resize(volt_tvec.size(),2)
        mt.setcol(0,volt_tvec)
        mt.setcol(1,volt_rlist.o(j))	
        sprint(filename, "%s%s.txt", VOLTAGEOUT_DIR, rncellnames.object[j].s)
	// print rncellnames.object[j].s
        file.wopen(filename)
        mt.fprint(file,"%5.5f\t")
        file.close()

	}
    }    
}

proc fprintVoltageVecRecord() {localobj mt, vfile, tfile
    strdef vfilename
    strdef tfilename
    for(j = 0; j<cells.count();j+=1){
    if(j == 0){
        vfile = new File()
        sprint(vfilename, "%s%sv.dat", VOLTAGEOUT_DIR, cellnames.object[j].s)	
        vfile.wopen(vfilename)
        volt_vec.vwrite(vfile)
        vfile.close()

        tfile = new File()
        sprint(tfilename, "%s%st.dat", VOLTAGEOUT_DIR, cellnames.object[j].s)
	tfile.wopen(tfilename)
        volt_tvec.vwrite(tfile)
        tfile.close()
    }
    }
}


proc spikerecord(){local i localobj nc, nil
    for (j = 0; j<cells.count(); j+=1) {
	cells.object[j].setSpikeRecord(10)
    }
    for (j = 0; j<rncells.count(); j+=1) {
        rngid = j * pc.nhost + pc.id
        glomid = GLOMID
        minid = 20 * glomid
        maxid = 20 * (glomid + 2)
	if (rngid >= minid && rngid < maxid) {    
	rncells.object[j].setSpikeRecord(3)
	}
    }    
}

proc onespikerecord(){local i localobj nc, nil
    for (j = 0; j<cells.count(); j+=1) {
	cells.object[j].setSpikeRecord(316)
    }
}

proc multiSpikeRecord(){local i localobj nc, nil
    for (j = 0; j<cells.count; j+=1) {
	cells.object[j].setMultiSpikeRecord(10,20,30,40)
    }
}

proc spikeout(){ local cellgid
    strdef sfilename
    for (j = 0; j<cells.count(); j+=1) {
    	cellgid = pc.nhost * j + pc.id
        sprint(sfilename, "%s%s", SPIKEOUT_DIR, cellnames.object[j].s)
	cells.object[j].fprintSpikeRecord(sfilename,INTERVAL,STOPTIME)
    }
    for (j = 0; j<rncells.count(); j+=1) {
        rngid = j * pc.nhost + pc.id
        glomid = GLOMID
        minid = 20 * glomid
        maxid = 20 * (glomid + 2)
	if (rngid >= minid && rngid < maxid) { 
        sprint(sfilename, "%s%s", SPIKEOUT_DIR, rncellnames.object[j].s)
        // fprintSpikeRecord(SPIKEOUT_DIR, INTERVAL, STOPTIME)
	rncells.object[j].fprintSpikeRecord(sfilename,INTERVAL,STOPTIME)
	}
    }    
}

proc multiSpikeout(){
    strdef sfilename
    for (j = 0; j<cells.count; j+=1) {
        sprint(sfilename, "%s%s", SPIKEOUT_DIR, cellnames.object[j].s)
        // fprintSpikeRecord(SPIKEOUT_DIR, INTERVAL, STOPTIME)
	cells.object[j].fprintMultiSpikeRecord(cellnames.object[j].s,INTERVAL,STOPTIME)
    }
}

// below functuins are not used (2020/11/16)

objref rn_volt_list // record membrance potential
objref rn_volt_tvec // record time
objref rn_volt_vec  // record voltage

proc setRNVoltageRecord() {local i,j, SynapsePrintOn
    rn_volt_tvec = new Vector()
    rn_volt_tvec.record(&t)
    printf("setRNVoltageRecord() (pc.id:%d)\n",pc.id)
    printf("SIZE OF VECTOR : %d\n",volt_tvec.buffer_size())
    rn_volt_list = new List()
    
    SynapsePrintOn = 0

    for (j = 0; j<RNCELLS; j+=1) {
        if (j < 163 + 183) { // pn
            volt_vec = new Vector()
	    volt_vec.record(&cells.object[int(j / pc.nhost)].Dend[3].v(0.5))
	    volt_list.append(volt_vec)
        } else { // ln
            volt_vec = new Vector()
	    volt_vec.record(&cells.object[int(j / pc.nhost)].Dend[40].v(0.5))
	    volt_list.append(volt_vec)
        }
    }
}

proc fprintRNVoltageRecord() {localobj mt, file
    strdef filename
    for(j = 0; j<NCELLS;j+=1){
	if (j % pc.nhost == pc.id) {        
        mt = new Matrix()
        file = new File()
        mt.resize(volt_tvec.size(),2)
        mt.setcol(0,volt_tvec)
        mt.setcol(1,volt_list.o(j))
        sprint(filename, "%s%s.txt", VOLTAGEOUT_DIR, cellnames.object[int(j / pc.nhost)].s)
        file.wopen(filename)
        mt.fprint(file,"%5.5f\t")
        file.close()
        }	
    }
}

objref weightv
objref weightvList // weight vector list

proc setncWeightRecord() {
    weightvList = new List()
    for i=0, nclist_chemiSTDP.count()-1 {
    	weightv = new Vector()
        weightvList.append(weightv)
    }
    for i=0, nclist_chemiSTDP.count()-1 {
	weightvList.object(i).record(&nclist_chemiSTDP.object(i).weight)
    }
}

objref wmt, wfile
strdef wfilename
proc fprintncWeightRecord() {
    for i=0, weightvList.count()-1 {
    	wmt = new Matrix()
	wfile = new File()
	wmt.resize(volt_tvec.size(), 2)
	wmt.setcol(0, volt_tvec)
	wmt.setcol(1, weightvList.object(i))
	sprint(wfilename, "%s%sweight.txt", WEIGHTOUT_DIR, ncNamelist_chemiSTDP.object(i).s)
	wfile.wopen(wfilename)
	wmt.fprint(wfile, "%5.5f\t")
	wfile.close()
    }
}

     